$sprity-emojione-sprites: (
  {{~#each layouts~}}
    {{~#each layout.items~}}
      "{{meta.name}}":(x:{{divide x width}},y:{{divide y height}}),
    {{~/each~}}
  {{~/each~}}
);

.emojione {
  display: inline-block;
  background-repeat: no-repeat;
  font-size: inherit;
  line-height: normal;
  text-indent: -9999em;
  vertical-align: middle;
}

@function sqrt($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }

  @return $x1;
}

@mixin sprity-emojione-position ($size) {
  @each $sprite-name, $position in $sprity-emojione-sprites {
    .emojione-#{$sprite-name} {
      background-position-x: - map-get($position, 'x') * $size;
      background-position-y: - map-get($position, 'y') * $size;
    }
  }
}

@mixin sprity-emojione-media ($multiplier, $base: 96) {
  @media
  only screen and (-webkit-min-device-pixel-ratio: #{$multiplier}),
  only screen and (        min-device-pixel-ratio: #{$multiplier}),
  only screen and (                min-resolution: #{$multiplier * $base}dpi),
  only screen and (                min-resolution: #{$multiplier}dppx) {

    @content;

  }
}

@mixin sprity-emojione ($size-unitless, $path, $retina: ()) {
  $size-px: $size-unitless * 1px;

  .emojione {
    width:  $size-px;
    height: $size-px;

    background-image: url("#{$path}/sprite-#{$size-unitless}.png");
    background-size:  ceil(sqrt(length($sprity-emojione-sprites))) * $size-px;

    @each $multiplier, $size-unitless in $retina {
      @include sprity-emojione-media($multiplier) {
        background-image: url("#{$path}/sprite-#{$size-unitless}.png");
      }
    }
  }

  @include sprity-emojione-position($size-px);
}
