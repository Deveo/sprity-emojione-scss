$sprity-emojione-sprites: (
  {{~#each layouts~}}
    {{~#each layout.items~}}
      "{{meta.name}}",
    {{~/each~}}
  {{~/each~}}
);

@mixin sprity-emojione-position ($size) {
  // each with index
  @for $i from 1 through length($sprity-emojione-sprites) {
    $sprite: nth($sprity-emojione-sprites, $i);

    &-#{$sprite} {
      background-position: 0 #{- ($i - 1) * $size};
    }
  }
}

@mixin sprity-emojione-media ($multiplier, $base: 96) {
  @media
  only screen and (-webkit-min-device-pixel-ratio: #{$multiplier}),
  only screen and (        min-device-pixel-ratio: #{$multiplier}),
  only screen and (                min-resolution: #{$multiplier * $base}dpi),
  only screen and (                min-resolution: #{$multiplier}dppx) {

    @content;

  }
}

@mixin sprity-emojione ($sizes, $path) {
  .emojione {
    @each $multiplier, $size-unitless in $sizes {
      $size-px: $size-unitless * 1px;

      @if $multiplier == 1 {

        width: $size-px;
        height: $size-px;
        background-image: url("#{$path}/sprite-#{$size-unitless}.png");
        background-size: $size-px;
        @include sprity-emojione-position($size-px);

      } @else {

        @include sprity-emojione-media($multiplier) {
          background-image: url("#{$path}/sprite@#{$size-unitless * $multiplier}x.png");
        }

      }
    }
  }
}
